@model List<DashboardRabitaBank.Models.AppReview>

@{
    ViewData["Title"] = "RabitaBank Mobile Reviews";
}

@section Styles {
    <style>
        :root {
            --app-store-blue: #007AFF;
            --app-store-light-blue: #34C759;
            --app-store-gray: #8E8E93;
            --app-store-light-gray: #F2F2F7;
            --app-store-dark: #1C1C1E;
            --app-store-white: #FFFFFF;
            --shadow-light: 0 4px 20px rgba(0, 122, 255, 0.15);
            --shadow-medium: 0 8px 30px rgba(0, 122, 255, 0.25);
            --shadow-heavy: 0 15px 50px rgba(0, 122, 255, 0.35);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8faff 0%, #e8f2ff 100%);
            min-height: 100vh;
            color: var(--app-store-dark);
            overflow-x: hidden;
        }

        .main-container {
            min-height: 100vh;
            padding-top: 2rem;
        }

        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            transform: translateY(0);
            animation: slideInDown 0.8s ease-out;
        }

        .page-title {
            font-size: 3.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, var(--app-store-blue), var(--app-store-light-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
            text-shadow: none;
            letter-spacing: -0.02em;
        }

        .page-subtitle {
            color: var(--app-store-gray);
            font-size: 1.2rem;
            font-weight: 500;
        }

        .back-button {
            position: fixed;
            top: 30px;
            left: 30px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 122, 255, 0.2);
            border-radius: 16px;
            padding: 12px 20px;
            color: var(--app-store-blue);
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-light);
            z-index: 1000;
        }

            .back-button:hover {
                transform: translateY(-2px);
                box-shadow: var(--shadow-medium);
                color: white;
                background: linear-gradient(135deg, var(--app-store-blue), var(--app-store-light-blue));
            }

        .stats-bar {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 20px 30px;
            text-align: center;
            box-shadow: var(--shadow-light);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: var(--shadow-medium);
            }

        .stat-number {
            font-size: 2rem;
            font-weight: 800;
            background: linear-gradient(135deg, var(--app-store-blue), var(--app-store-light-blue));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-label {
            color: var(--app-store-gray);
            font-weight: 600;
            font-size: 0.9rem;
        }

        .reviews-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .review-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            padding: 32px;
            margin-bottom: 24px;
            box-shadow: var(--shadow-light);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transform: translateY(0) rotateX(0deg);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

            .review-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--app-store-blue), var(--app-store-light-blue));
                border-radius: 24px 24px 0 0;
            }

            .review-card:hover {
                transform: translateY(-8px) rotateX(2deg);
                box-shadow: var(--shadow-heavy);
                border-color: rgba(0, 122, 255, 0.2);
            }

        .user-info {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .user-avatar {
            width: 64px;
            height: 64px;
            border-radius: 20px;
            border: 3px solid rgba(0, 122, 255, 0.2);
            margin-right: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            background: linear-gradient(135deg, var(--app-store-blue), var(--app-store-light-blue));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 1.2rem;
        }

        .review-card:hover .user-avatar {
            transform: scale(1.05);
            border-color: var(--app-store-blue);
        }

        .user-details h5 {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--app-store-dark);
            margin-bottom: 4px;
        }

        .user-meta {
            color: var(--app-store-gray);
            font-size: 0.95rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .rating-stars {
            color: #FFD60A;
            font-size: 1.1rem;
        }

        .review-content {
            font-size: 1.05rem;
            line-height: 1.7;
            color: #2C2C2E;
            margin-bottom: 20px;
            font-weight: 400;
        }

        .analysis-badges {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .badge-modern {
            padding: 10px 18px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            border: none;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .badge-sentiment {
            background: rgba(0, 122, 255, 0.15);
            color: var(--app-store-blue);
            border: 1px solid rgba(0, 122, 255, 0.3);
        }

            .badge-sentiment.positive {
                background: rgba(52, 199, 89, 0.15);
                color: var(--app-store-light-blue);
                border: 1px solid rgba(52, 199, 89, 0.3);
            }

            .badge-sentiment.negative {
                background: rgba(255, 59, 48, 0.15);
                color: #FF3B30;
                border: 1px solid rgba(255, 59, 48, 0.3);
            }

        .badge-purpose {
            background: rgba(175, 82, 222, 0.15);
            color: #AF52DE;
            border: 1px solid rgba(175, 82, 222, 0.3);
        }

        .badge-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .floating-circle {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(0, 122, 255, 0.1), rgba(52, 199, 89, 0.1));
            animation: float 6s ease-in-out infinite;
        }

            .floating-circle:nth-child(1) {
                width: 100px;
                height: 100px;
                top: 20%;
                left: 10%;
                animation-delay: 0s;
            }

            .floating-circle:nth-child(2) {
                width: 150px;
                height: 150px;
                top: 60%;
                right: 15%;
                animation-delay: 2s;
            }

            .floating-circle:nth-child(3) {
                width: 80px;
                height: 80px;
                bottom: 30%;
                left: 20%;
                animation-delay: 4s;
            }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--app-store-gray);
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 20px;
                opacity: 0.5;
            }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
            }

            50% {
                transform: translateY(-20px) rotate(180deg);
            }
        }

        @@keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@media (max-width: 768px) {
            .page-title {
                font-size: 2.5rem;
            }

            .review-card {
                padding: 24px;
                margin-bottom: 20px;
            }

            .stats-bar {
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }

            .back-button {
                top: 20px;
                left: 20px;
                padding: 10px 16px;
            }
        }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
}

<div class="floating-elements">
    <div class="floating-circle"></div>
    <div class="floating-circle"></div>
    <div class="floating-circle"></div>
</div>

<a href="@Url.Action("Index", "Home")" class="back-button">
    <i class="fas fa-arrow-left me-2"></i>Ana Səhifə
</a>

<div class="container main-container">
    <div class="page-header">
        <h1 class="page-title">RabitaBank Business</h1>
        <p class="page-subtitle">Biznes müştəri rəyləri və təhlilləri</p>
    </div>

    <div class="stats-bar">
        <div class="stat-card">
            <div class="stat-number">@Model.Count</div>
            <div class="stat-label">Toplam Rəy</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@(Model.Where(r => r.Analysis?.Sentiment == "positive").Count())</div>
            <div class="stat-label">Pozitiv</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@(Model.Where(r => r.Analysis?.Sentiment == "negative").Count())</div>
            <div class="stat-label">Neqativ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@(Model.Any() ? Math.Round(Model.Average(r => r.Score), 1) : 0)</div>
            <div class="stat-label">Orta Reytinq</div>
        </div>
    </div>

    <div class="reviews-container">
        @if (Model.Any())
        {
            @foreach (var review in Model.OrderByDescending(r => r.Date))
            {
                <div class="review-card" data-sentiment="@review.Analysis?.Sentiment">
                    <div class="user-info">
                        <div class="user-avatar">
                            @(review.UserName?.Substring(0, 1).ToUpper() ?? "U")
                        </div>
                        <div class="user-details">
                            <h5>@(review.UserName ?? "Anonim İstifadəçi")</h5>
                            <div class="user-meta">
                                <span class="rating-stars">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        @if (i <= review.Score)
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    }
                                </span>
                                <span>@review.Score.0</span>
                                <span>•</span>
                                <span>@review.Date.ToString("yyyy-MM-dd")</span>
                            </div>
                        </div>
                    </div>
                    <p class="review-content">@review.Content</p>

                    @if (review.Analysis != null)
                    {
                        <div class="analysis-badges">
                            <span class="badge badge-modern badge-sentiment @review.Analysis.Sentiment">
                                @if (review.Analysis.Sentiment == "positive")
                                {
                                    <i class="fas fa-heart me-1"></i>
                                }
                                else if (review.Analysis.Sentiment == "negative")
                                {
                                    <i class="fas fa-thumbs-down me-1"></i>
                                }
                                else
                                {
                                    <i class="fas fa-meh me-1"></i>
                                }
                                @(review.Analysis.Sentiment?.Substring(0, 1).ToUpper() + review.Analysis.Sentiment?.Substring(1))
                            </span>

                            @if (!string.IsNullOrEmpty(review.Analysis.Purpose))
                            {
                                <span class="badge badge-modern badge-purpose">
                                    <i class="fas fa-tag me-1"></i>@(review.Analysis.Purpose?.Substring(0, 1).ToUpper() + review.Analysis.Purpose?.Substring(1))
                                </span>
                            }


                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-comments"></i>
                <h3>Hələ rəy yoxdur</h3>
                <p>RabitaBank Business üçün hələ heç bir rəy əlavə edilməyib.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Intersection Observer for card animations
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.review-card').forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(30px)';
                card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
                observer.observe(card);
            });

            // Stats counter animation
            document.querySelectorAll('.stat-number').forEach(stat => {
                const finalNumber = parseInt(stat.textContent);
                let currentNumber = 0;
                const increment = finalNumber / 30;

                const counter = setInterval(() => {
                    currentNumber += increment;
                    if (currentNumber >= finalNumber) {
                        stat.textContent = finalNumber;
                        clearInterval(counter);
                    } else {
                        stat.textContent = Math.floor(currentNumber);
                    }
                }, 50);
            });
        });
    </script>
}