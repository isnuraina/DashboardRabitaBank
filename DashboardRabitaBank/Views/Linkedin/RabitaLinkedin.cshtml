@using DashboardRabitaBank.Models
@model List<LinkedInPost>
@{
    ViewData["Title"] = "LinkedIn Posts Dashboard";
    var totalPosts = Model?.Count ?? 0;
    var totalLikes = Model?.Sum(p => p.Stats?.Like ?? 0) ?? 0;
    var totalReposts = Model?.Sum(p => p.Stats?.Reposts ?? 0) ?? 0;
    var totalReactions = Model?.Sum(p => p.Stats?.TotalReactions ?? 0) ?? 0;
    var totalFollowers = Model?.Sum(p => p.Author?.FollowerCount ?? 0) ?? 0;
    var engagementRate = totalFollowers > 0 ? Math.Round((double)totalReactions / totalFollowers * 100, 1) : 0;
}

<!DOCTYPE html>
<html lang="az">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        :root {
            --linkedin-blue: #0077B5;
            --linkedin-light-blue: #378FE9;
            --linkedin-dark-blue: #004182;
            --linkedin-accent: #00A0DC;
            --linkedin-secondary: #70B5F9;
            --linkedin-gold: #F5C542;
            --linkedin-gray: #666666;
            --linkedin-light-gray: #F3F6F8;
            --linkedin-dark: #2D3748;
            --linkedin-white: #FFFFFF;
            --gradient-primary: linear-gradient(135deg, #0077B5 0%, #378FE9 50%, #00A0DC 100%);
            --gradient-secondary: linear-gradient(135deg, #70B5F9 0%, #378FE9 50%, #0077B5 100%);
            --gradient-accent: linear-gradient(135deg, #F5C542 0%, #FFD700 50%, #FFA500 100%);
            --gradient-dark: linear-gradient(135deg, #2D3748 0%, #4A5568 100%);
            --shadow-light: 0 4px 20px rgba(0, 119, 181, 0.15);
            --shadow-medium: 0 8px 30px rgba(0, 119, 181, 0.25);
            --shadow-heavy: 0 15px 50px rgba(0, 119, 181, 0.35);
            --shadow-card: 0 10px 40px rgba(0, 119, 181, 0.12);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #f8fbff 0%, #e8f4f8 30%, #daf1ff 70%, #cce7f0 100%);
            min-height: 100vh;
            color: var(--linkedin-dark);
            overflow-x: hidden;
        }

        .floating-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            opacity: 0.6;
        }

        .bg-circle {
            position: absolute;
            border-radius: 50%;
            animation: float 15s ease-in-out infinite;
            filter: blur(1px);
        }

        .bg-circle:nth-child(1) {
            width: 200px;
            height: 200px;
            background: var(--gradient-secondary);
            top: 10%;
            left: 5%;
            animation-delay: 0s;
        }

        .bg-circle:nth-child(2) {
            width: 150px;
            height: 150px;
            background: var(--gradient-accent);
            top: 60%;
            right: 10%;
            animation-delay: 5s;
        }

        .bg-circle:nth-child(3) {
            width: 300px;
            height: 300px;
            background: var(--gradient-primary);
            bottom: 20%;
            left: 15%;
            animation-delay: 10s;
        }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0px) scale(1);
                opacity: 0.3;
            }
            50% {
                transform: translateY(-30px) scale(1.1);
                opacity: 0.6;
            }
        }

        .container-fluid {
            padding: 2rem;
            position: relative;
            z-index: 1;
        }

        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            animation: slideInDown 1s ease-out;
        }

        .page-title {
            font-size: 3.5rem;
            font-weight: 900;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            letter-spacing: -0.02em;
            text-shadow: 0 4px 20px rgba(0, 119, 181, 0.3);
        }

        .page-subtitle {
            color: var(--linkedin-gray);
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 2rem;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
            animation: fadeInUp 1s ease-out 0.3s both;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            text-align: center;
            box-shadow: var(--shadow-card);
            border: 1px solid rgba(0, 119, 181, 0.1);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: conic-gradient(
                rgba(0, 119, 181, 0.1) 0deg,
                rgba(55, 143, 233, 0.05) 90deg,
                rgba(245, 197, 66, 0.08) 180deg,
                rgba(0, 119, 181, 0.1) 270deg
            );
            opacity: 0;
            transition: opacity 0.5s ease;
            animation: rotate 20s linear infinite;
            z-index: -1;
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: var(--shadow-heavy);
        }

        @@keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            margin: 0 auto 1rem;
            background: var(--gradient-primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            box-shadow: var(--shadow-medium);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 800;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: var(--linkedin-gray);
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-container {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(25px);
            border-radius: 25px;
            box-shadow: var(--shadow-heavy);
            overflow: hidden;
            border: 2px solid rgba(0, 119, 181, 0.1);
            animation: fadeInUp 1s ease-out 0.6s both;
            position: relative;
        }

        .table-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--gradient-primary);
            z-index: 1;
        }

        .table-header {
            background: var(--gradient-dark);
            color: white;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-title {
            font-size: 1.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .table-actions {
            display: flex;
            gap: 10px;
        }

        .btn-action {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            border-radius: 10px;
            padding: 8px 16px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .btn-action:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            color: white;
            text-decoration: none;
        }

        .posts-grid {
            padding: 2rem;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            max-height: 800px;
            overflow-y: auto;
        }

        .posts-grid::-webkit-scrollbar {
            width: 8px;
        }

        .posts-grid::-webkit-scrollbar-track {
            background: rgba(0, 119, 181, 0.1);
            border-radius: 10px;
        }

        .posts-grid::-webkit-scrollbar-thumb {
            background: var(--gradient-primary);
            border-radius: 10px;
        }

        .post-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: var(--shadow-card);
            border: 1px solid rgba(0, 119, 181, 0.1);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            transform: translateZ(0);
        }

        .post-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 119, 181, 0.1), transparent);
            transition: left 0.8s ease;
        }

        .post-card:hover::before {
            left: 100%;
        }

        .post-card:hover {
            transform: translateY(-8px) scale(1.02) rotateX(2deg);
            box-shadow: var(--shadow-heavy);
            border-color: rgba(0, 119, 181, 0.3);
        }

        .post-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid rgba(0, 119, 181, 0.1);
        }

        .author-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid transparent;
            background: var(--gradient-primary);
            padding: 2px;
            transition: all 0.3s ease;
        }

        .author-avatar:hover {
            transform: scale(1.1) rotate(5deg);
        }

        .author-info {
            flex: 1;
        }

        .author-name {
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--linkedin-dark);
            margin-bottom: 0.25rem;
        }

        .author-followers {
            font-size: 0.85rem;
            color: var(--linkedin-gray);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .post-date {
            font-size: 0.8rem;
            color: var(--linkedin-gray);
            text-align: right;
        }

        .post-content {
            margin-bottom: 1.5rem;
        }

        .post-text {
            font-size: 0.95rem;
            line-height: 1.6;
            color: var(--linkedin-dark);
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .post-media {
            width: 100%;
            max-height: 200px;
            object-fit: cover;
            border-radius: 15px;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .post-media:hover {
            transform: scale(1.02);
        }

        .post-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 1rem;
            border-top: 2px solid rgba(0, 119, 181, 0.1);
        }

        .reactions {
            display: flex;
            gap: 15px;
        }

        .reaction {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
            color: var(--linkedin-gray);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .reaction:hover {
            color: var(--linkedin-blue);
            transform: translateY(-2px) scale(1.05);
        }

        .reaction-icon {
            font-size: 1.1rem;
        }

        .reaction-count {
            font-weight: 600;
        }

        .post-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            background: var(--gradient-primary);
            border: none;
            color: white;
            border-radius: 10px;
            padding: 8px 12px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.2);
            transition: left 0.3s ease;
        }

        .action-btn:hover::before {
            left: 100%;
        }

        .action-btn:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: var(--shadow-medium);
        }

        .post-type-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--gradient-accent);
            color: white;
            padding: 4px 8px;
            border-radius: 8px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
            box-shadow: var(--shadow-light);
        }

        .engagement-ring {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: conic-gradient(
                var(--linkedin-blue) 0deg,
                var(--linkedin-light-blue) 120deg,
                var(--linkedin-gold) 240deg,
                var(--linkedin-blue) 360deg
            );
            display: flex;
            align-items: center;
            justify-content: center;
            animation: spin 10s linear infinite;
        }

        .engagement-ring::after {
            content: '';
            width: 30px;
            height: 30px;
            background: white;
            border-radius: 50%;
        }

        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .empty-state {
            text-align: center;
            padding: 4rem;
            color: var(--linkedin-gray);
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        @@keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@media (max-width: 768px) {
            .posts-grid {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .stats-cards {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
            
            .page-title {
                font-size: 2.5rem;
            }
            
            .post-card {
                padding: 1rem;
            }

            .table-header {
                flex-direction: column;
                gap: 1rem;
            }
        }

        .loading-skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }

        @@keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
    </style>
</head>
<body>
    <div class="floating-bg">
        <div class="bg-circle"></div>
        <div class="bg-circle"></div>
        <div class="bg-circle"></div>
    </div>

    <div class="container-fluid">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fab fa-linkedin"></i>
                LinkedIn Posts Dashboard
            </h1>
            <p class="page-subtitle">Rabita Bank sosial media təcrübələri və post analitikası</p>
        </div>

        <!-- Stats Cards -->
        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-newspaper"></i>
                </div>
                <div class="stat-number">@totalPosts</div>
                <div class="stat-label">Ümumi Postlar</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-thumbs-up"></i>
                </div>
                <div class="stat-number">@totalLikes</div>
                <div class="stat-label">Ümumi Bəyənmələr</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-retweet"></i>
                </div>
                <div class="stat-number">@totalReposts</div>
                <div class="stat-label">Ümumi Paylaşımlar</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-number">@(engagementRate)%</div>
                <div class="stat-label">Engagement Oranı</div>
            </div>
        </div>
        <div class="container mt-4">
            <h2 class="text-center" style="padding-top: 80px; margin-bottom: 40px; color: #0077B5; font-weight: 600;">
                @ViewData["Title"]
            </h2>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body text-center">
                            <h5>Total Posts</h5>
                            <h2>@ViewBag.TotalPosts</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body text-center">
                            <h5>Total Reactions</h5>
                            <h2>@ViewBag.TotalReactions</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-info">
                        <div class="card-body text-center">
                            <h5>Total Likes</h5>
                            <h2>@ViewBag.TotalLikes</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body text-center">
                            <h5>Total Reposts</h5>
                            <h2>@ViewBag.TotalReposts</h2>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="row mb-5">
                <!-- Reactions Chart -->
                <div class="col-md-6">
                    <div class="card shadow p-3 bg-white rounded">
                        <div class="card-body text-center">
                            <h4 class="card-title mb-4">Statistika</h4>
                            <div style="display:flex; justify-content:center; align-items:center;">
                                <canvas id="reactionsChart" style="max-width:300px; max-height:300px;"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Engagement Timeline -->
                <div class="col-md-6">
                    <div class="card shadow p-3 bg-white rounded">
                        <div class="card-body">
                            <h4 class="card-title mb-4 text-center">Post Engagement</h4>
                            <canvas id="engagementChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Posts List -->
            <h1 class="mb-4">LinkedIn Posts</h1>
            @foreach (var post in Model)
            {
                <div class="card shadow p-3 mb-5 bg-white rounded">
                    <div class="card-body">
                        <!-- Author Info -->
                        <div class="d-flex align-items-center mb-3">
                            @if (!string.IsNullOrEmpty(post.Author?.LogoUrl))
                            {
                                <img src="@post.Author.LogoUrl" alt="Company Logo"
                                     style="width:50px;height:50px;border-radius:50%;margin-right:15px;" />
                            }
                            <div>
                                <h5 class="mb-0">@post.Author?.Name</h5>
                                <small class="text-muted">@post.Author?.FollowerCount followers</small>
                            </div>
                        </div>

                        <!-- Post Content -->
                        <p><strong>Post:</strong> @post.Text</p>
                        <p><small class="text-muted">Posted: @post.PostedAt?.Date</small></p>

                        <!-- Media -->
                        @if (post.Media?.Items != null && post.Media.Items.Any())
                        {
                            <div class="mb-3">
                                @foreach (var item in post.Media.Items)
                                {
                                    @if (!string.IsNullOrEmpty(item.Url))
                                    {
                                        <img src="@item.Url" alt="Post Media"
                                             style="max-width:100%;height:auto;border-radius:8px;" class="mb-2" />
                                    }
                                }
                            </div>
                        }

                        <!-- Stats -->
                        <div class="row text-center mt-3">
                            <div class="col">
                                <strong>@(post.Stats?.TotalReactions ?? 0)</strong>
                                <br /><small>Reactions</small>
                            </div>
                            <div class="col">
                                <strong>@(post.Stats?.Like ?? 0)</strong>
                                <br /><small>👍 Likes</small>
                            </div>
                            <div class="col">
                                <strong>@(post.Stats?.Love ?? 0)</strong>
                                <br /><small>❤️ Loves</small>
                            </div>
                            <div class="col">
                                <strong>@(post.Stats?.Celebrate ?? 0)</strong>
                                <br /><small>🎉 Celebrates</small>
                            </div>
                            <div class="col">
                                <strong>@(post.Stats?.Reposts ?? 0)</strong>
                                <br /><small>🔄 Reposts</small>
                            </div>
                        </div>

                        <!-- Post Link -->
                        @if (!string.IsNullOrEmpty(post.PostUrl))
                        {
                            <div class="mt-3">
                                <a href="@post.PostUrl" target="_blank" class="btn btn-outline-primary btn-sm">
                                    LinkedIn-də Bax
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Table Container -->
        <div class="table-container">
            <div class="table-header">
                <div class="table-title">
                    <i class="fab fa-linkedin"></i>
                    LinkedIn Postları (@totalPosts post)
                </div>
                <div class="table-actions">
                    <a href="@Url.Action("RabitaLinkedin", "Linkedin")" class="btn-action">
                        <i class="fas fa-sync-alt"></i> Yenilə
                    </a>
                    <button class="btn-action" onclick="exportData()">
                        <i class="fas fa-download"></i> Export
                    </button>
                    <button class="btn-action" onclick="toggleView()">
                        <i class="fas fa-th"></i> Grid/List
                    </button>
                </div>
            </div>

            <div class="posts-grid" id="postsGrid">
                @if (Model == null || !Model.Any())
                {
                    <div class="empty-state">
                        <i class="fab fa-linkedin empty-icon"></i>
                        <h3>Hələ ki post yoxdur</h3>
                        <p>LinkedIn postları burada görünəcək</p>
                    </div>
                }
                else
                {
                    @foreach (var post in Model)
                    {
                        var postTypeColor = post.PostType switch
                        {
                            "Article" => "var(--gradient-primary)",
                            "Video" => "var(--gradient-secondary)",
                            "Image" => "var(--gradient-accent)",
                            "Poll" => "linear-gradient(135deg, #9B59B6, #8E44AD)",
                            "Document" => "linear-gradient(135deg, #34495E, #2C3E50)",
                            _ => "var(--gradient-primary)"
                        };

                        var postDate = DateTime.TryParse(post.PostedAt?.Date, out var parsedDate) 
                            ? GetRelativeTime(parsedDate) 
                            : post.PostedAt?.Relative ?? "Bilinmir";
                    
                        <div class="post-card" data-post-id="@post.Id">
                            <div class="engagement-ring"></div>
                            <div class="post-type-badge" style="background: @postTypeColor;">
                                @(post.PostType ?? "Post")
                            </div>
                            
                            <div class="post-header">
                                <img src="@(post.Author?.LogoUrl ?? "https://via.placeholder.com/60")" 
                                     alt="@(post.Author?.Name ?? "Author")" 
                                     class="author-avatar"
                                     onerror="this.src='https://via.placeholder.com/60'">
                                <div class="author-info">
                                    <div class="author-name">@(post.Author?.Name ?? "Rabita Bank")</div>
                                    <div class="author-followers">
                                        <i class="fas fa-users"></i>
                                        <span>@FormatNumber(post.Author?.FollowerCount ?? 0) izləyici</span>
                                    </div>
                                </div>
                                <div class="post-date">@postDate</div>
                            </div>

                            <div class="post-content">
                                <div class="post-text">
                                    @(TruncateText(post.Text ?? "", 200))
                                </div>
                                @if (post.Media?.Items != null && post.Media.Items.Any())
                                {
                                    <img src="@post.Media.Items.FirstOrDefault()?.Url" 
                                         alt="Post Media" 
                                         class="post-media"
                                         onerror="this.style.display='none'">
                                }
                            </div>

                            <div class="post-stats">
                                <div class="reactions">
                                    <div class="reaction" title="Bəyənmələr">
                                        <i class="fas fa-thumbs-up reaction-icon" style="color: #0077B5;"></i>
                                        <span class="reaction-count">@(post.Stats?.Like ?? 0)</span>
                                    </div>
                                    <div class="reaction" title="Sevgi">
                                        <i class="fas fa-heart reaction-icon" style="color: #FF6B35;"></i>
                                        <span class="reaction-count">@(post.Stats?.Love ?? 0)</span>
                                    </div>
                                    <div class="reaction" title="Təbrik">
                                        <i class="fas fa-trophy reaction-icon" style="color: #F5C542;"></i>
                                        <span class="reaction-count">@(post.Stats?.Celebrate ?? 0)</span>
                                    </div>
                                    <div class="reaction" title="Paylaşımlar">
                                        <i class="fas fa-retweet reaction-icon" style="color: #00A0DC;"></i>
                                        <span class="reaction-count">@(post.Stats?.Reposts ?? 0)</span>
                                    </div>
                                </div>
                                <div class="post-actions">
                                    @if (!string.IsNullOrEmpty(post.PostUrl))
                                    {
                                        <button class="action-btn" onclick="openPost('@post.PostUrl')" title="Posta keç">
                                            <i class="fas fa-external-link-alt"></i>
                                        </button>
                                    }
                                    <button class="action-btn" onclick="sharePost('@post.Id')" title="Paylaş">
                                        <i class="fas fa-share"></i>
                                    </button>
                                    <button class="action-btn" onclick="analyzePost('@post.Id')" title="Analizlə">
                                        <i class="fas fa-chart-bar"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Real data from controller
        const linkedinPosts = @Html.Raw(Json.Serialize(Model ?? new List<LinkedInPost>()));
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the dashboard with real data
            initializeDashboard();
            addInteractiveEffects();
            
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        function initializeDashboard() {
            // Add staggered animation to cards
            const cards = document.querySelectorAll('.post-card');
            cards.forEach((card, index) => {
                card.style.animation = `fadeInUp 0.6s ease-out ${index * 0.1}s both`;
            });
        }

        function addInteractiveEffects() {
            // Add ripple effect to buttons
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('action-btn') || e.target.closest('.action-btn')) {
                    createRipple(e);
                }
            });

            // Add hover effects to post cards
            document.addEventListener('mouseover', function(e) {
                if (e.target.classList.contains('post-card') || e.target.closest('.post-card')) {
                    const card = e.target.classList.contains('post-card') ? e.target : e.target.closest('.post-card');
                    addCardHoverEffect(card);
                }
            });

            // Add parallax effect
            window.addEventListener('scroll', function() {
                const scrolled = window.pageYOffset;
                const parallax = document.querySelectorAll('.bg-circle');
                const speed = 0.5;

                parallax.forEach((element, index) => {
                    const yPos = -(scrolled * speed * (index + 1));
                    element.style.transform = `translateY(${yPos}px)`;
                });
            });
        }

        function createRipple(event) {
            const button = event.target.closest('.action-btn');
            if (!button) return;

            const circle = document.createElement('span');
            const diameter = Math.max(button.clientWidth, button.clientHeight);
            const radius = diameter / 2;

            const rect = button.getBoundingClientRect();
            circle.style.width = circle.style.height = `${diameter}px`;
            circle.style.left = `${event.clientX - rect.left - radius}px`;
            circle.style.top = `${event.clientY - rect.top - radius}px`;
            circle.classList.add('ripple-effect');

            const ripple = button.getElementsByClassName('ripple-effect')[0];
            if (ripple) {
                ripple.remove();
            }

            button.appendChild(circle);

            // Add ripple styles
            if (!document.getElementById('ripple-styles')) {
                const style = document.createElement('style');
                style.id = 'ripple-styles';
                style.textContent = `
                    .ripple-effect {
                        position: absolute;
                        border-radius: 50%;
                        background: rgba(255, 255, 255, 0.6);
                        transform: scale(0);
                        animation: ripple-animation 0.6s linear;
                        pointer-events: none;
                    }
                    
                    @@keyframes ripple-animation {
                        to {
                            transform: scale(4);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(style);
            }
        }

        function addCardHoverEffect(card) {
            // Add glow effect
            const glowEffect = document.createElement('div');
            glowEffect.className = 'card-glow';
            glowEffect.style.cssText = `
                position: absolute;
                top: -5px;
                left: -5px;
                right: -5px;
                bottom: -5px;
                background: linear-gradient(45deg, rgba(0, 119, 181, 0.3), rgba(55, 143, 233, 0.3));
                border-radius: 25px;
                z-index: -1;
                opacity: 0;
                transition: opacity 0.3s ease;
                animation: glow-pulse 2s ease-in-out infinite;
            `;

            if (!card.querySelector('.card-glow')) {
                card.style.position = 'relative';
                card.appendChild(glowEffect);
                setTimeout(() => glowEffect.style.opacity = '1', 10);
            }

            // Add glow animation styles
            if (!document.getElementById('glow-styles')) {
                const style = document.createElement('style');
                style.id = 'glow-styles';
                style.textContent = `
                    @@keyframes glow-pulse {
                        0%, 100% {
                            transform: scale(1);
                            opacity: 0.5;
                        }
                        50% {
                            transform: scale(1.02);
                            opacity: 0.8;
                        }
                    }
                `;
                document.head.appendChild(style);
            }
        }

        // Action functions
        function exportData() {
            showNotification('Məlumatlar export edilir...', 'info');
            
            setTimeout(() => {
                const data = JSON.stringify(linkedinPosts, null, 2);
                const blob = new Blob([data], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `linkedin-posts-export-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showNotification('Məlumatlar uğurla export edildi!', 'success');
            }, 1500);
        }

        function toggleView() {
            const postsGrid = document.getElementById('postsGrid');
            const toggleBtn = event.target.closest('.btn-action');
            
            if (postsGrid.style.gridTemplateColumns === '1fr') {
                postsGrid.style.gridTemplateColumns = 'repeat(auto-fit, minmax(400px, 1fr))';
                toggleBtn.innerHTML = '<i class="fas fa-list"></i> List';
                showNotification('Grid görünüşü aktivləşdirildi', 'info');
            } else {
                postsGrid.style.gridTemplateColumns = '1fr';
                toggleBtn.innerHTML = '<i class="fas fa-th"></i> Grid';
                showNotification('List görünüşü aktivləşdirildi', 'info');
            }
        }

        function openPost(postUrl) {
            if (postUrl && postUrl !== '#') {
                window.open(postUrl, '_blank');
                showNotification('Post yeni səkmədə açıldı', 'success');
            } else {
                showNotification('Post linki mövcud deyil', 'warning');
            }
        }

        function sharePost(postId) {
            const postUrl = window.location.href + '#post-' + postId;
            
            if (navigator.share) {
                navigator.share({
                    title: 'LinkedIn Post - Rabita Bank',
                    text: 'Rabita Bank LinkedIn postu',
                    url: postUrl
                }).then(() => {
                    showNotification('Post uğurla paylaşıldı', 'success');
                }).catch(() => {
                    copyToClipboard(postUrl);
                });
            } else {
                copyToClipboard(postUrl);
            }
        }

        function copyToClipboard(text) {
            if (navigator.clipboard) {
                navigator.clipboard.writeText(text)
                    .then(() => showNotification('Link panoya kopyalandı', 'success'))
                    .catch(() => showNotification('Kopyalama xətası', 'error'));
            } else {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showNotification('Link panoya kopyalandı', 'success');
            }
        }

        function analyzePost(postId) {
            showNotification('Post analizi başladı...', 'info');
            
            // Find the post data
            const post = linkedinPosts.find(p => p.id === postId || p.Id === postId);
            
            if (post) {
                setTimeout(() => {
                    const stats = post.stats || post.Stats || {};
                    const totalReactions = (stats.totalReactions || stats.TotalReactions || 0);
                    const engagement = post.author?.followerCount > 0 
                        ? ((totalReactions / post.author.followerCount) * 100).toFixed(2)
                        : '0';
                    
                    showNotification(`Post analizi: ${totalReactions} reaksiya, ${engagement}% engagement`, 'success');
                }, 2000);
            } else {
                showNotification('Post məlumatları tapılmadı', 'error');
            }
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-${getNotificationIcon(type)}"></i>
                    <span>${message}</span>
                    <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            // Add notification styles if not exists
            if (!document.getElementById('notification-styles')) {
                const style = document.createElement('style');
                style.id = 'notification-styles';
                style.textContent = `
                    .notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        z-index: 9999;
                        min-width: 300px;
                        padding: 15px;
                        border-radius: 10px;
                        color: white;
                        font-weight: 500;
                        animation: slideInRight 0.3s ease-out;
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
                    }
                    .notification-success { background: linear-gradient(135deg, #27AE60, #2ECC71); }
                    .notification-error { background: linear-gradient(135deg, #E74C3C, #C0392B); }
                    .notification-warning { background: linear-gradient(135deg, #F39C12, #E67E22); }
                    .notification-info { background: linear-gradient(135deg, #3498DB, #2980B9); }
                    .notification-content { display: flex; align-items: center; gap: 10px; }
                    .notification-close { 
                        background: none; border: none; color: white; cursor: pointer; 
                        margin-left: auto; padding: 0; font-size: 14px;
                    }
                    @@keyframes slideInRight {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                `;
                document.head.appendChild(style);
            }

            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.animation = 'slideInRight 0.3s ease-out reverse';
                    setTimeout(() => notification.remove(), 300);
                }
            }, 5000);
        }

        function getNotificationIcon(type) {
            const icons = {
                success: 'check-circle',
                error: 'exclamation-circle',
                warning: 'exclamation-triangle',
                info: 'info-circle'
            };
            return icons[type] || 'info-circle';
        }

        // Add search functionality
        function searchPosts() {
            const searchInput = document.getElementById('searchInput');
            if (!searchInput) return;

            const query = searchInput.value.toLowerCase();
            const postCards = document.querySelectorAll('.post-card');

            postCards.forEach(card => {
                const text = card.querySelector('.post-text')?.textContent.toLowerCase() || '';
                const author = card.querySelector('.author-name')?.textContent.toLowerCase() || '';
                
                if (text.includes(query) || author.includes(query) || query === '') {
                    card.style.display = 'block';
                    card.style.animation = 'fadeInUp 0.3s ease-out';
                } else {
                    card.style.display = 'none';
                }
            });

            if (query) {
                showNotification(`Axtarış nəticəsi: "${query}"`, 'info');
            }
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + K for search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                const searchInput = document.getElementById('searchInput');
                if (searchInput) {
                    searchInput.focus();
                }
            }
            
            // Ctrl/Cmd + R for refresh
            if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
                e.preventDefault();
                window.location.reload();
            }
            
            // Esc to clear search
            if (e.key === 'Escape') {
                const searchInput = document.getElementById('searchInput');
                if (searchInput && searchInput.value) {
                    searchInput.value = '';
                    searchPosts();
                }
            }
        });

        // Performance optimization - lazy load images
        function lazyLoadImages() {
            const images = document.querySelectorAll('img[src]');
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.classList.add('loaded');
                        observer.unobserve(img);
                    }
                });
            });

            images.forEach(img => imageObserver.observe(img));
        }

        // Initialize lazy loading
        setTimeout(lazyLoadImages, 1000);

        // Add smooth scrolling for better UX
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Add auto-refresh every 5 minutes
        setInterval(() => {
            showNotification('Məlumatlar avtomatik yenilənir...', 'info');
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        }, 300000); // 5 minutes

        console.log('🚀 LinkedIn Posts Dashboard loaded with real data!');
        console.log(`📊 Total posts loaded: ${linkedinPosts.length}`);
    </script>
</body>
</html>

@functions {
    private string FormatNumber(int num)
    {
        if (num >= 1000000)
            return $"{(num / 1000000.0):F1}M";
        else if (num >= 1000)
            return $"{(num / 1000.0):F1}K";
        return num.ToString();
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text ?? "";
        return text.Substring(0, maxLength) + "...";
    }

    private string GetRelativeTime(DateTime date)
    {
        var timeSpan = DateTime.Now - date;
        
        if (timeSpan.TotalMinutes < 1)
            return "İndi";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} dəqiqə əvvəl";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} saat əvvəl";
        else if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} gün əvvəl";
        else if (timeSpan.TotalDays < 30)
            return $"{(int)(timeSpan.TotalDays / 7)} həftə əvvəl";
        else if (timeSpan.TotalDays < 365)
            return $"{(int)(timeSpan.TotalDays / 30)} ay əvvəl";
        else
            return $"{(int)(timeSpan.TotalDays / 365)} il əvvəl";
    }


}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Reactions Pie Chart
        const reactionsCtx = document.getElementById('reactionsChart').getContext('2d');
        new Chart(reactionsCtx, {
            type: 'doughnut',
            data: {
                labels: ['👍 Like', '❤️ Love', '🎉 Celebrate'],
                datasets: [{
                    data: [@ViewBag.TotalLikes, @ViewBag.TotalLoves, @ViewBag.TotalCelebrates],
                    backgroundColor: ['#0077B5', '#E74C3C', '#F39C12'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 15,
                            font: { size: 12 }
                        }
                    }
                }
            }
        });

        // Engagement Bar Chart
        const engagementCtx = document.getElementById('engagementChart').getContext('2d');
        const posts = @Html.Raw(Json.Serialize(Model.Select(p => new {
            text = p.Text?.Substring(0, Math.Min(30, p.Text?.Length ?? 0)) + "...",
            reactions = p.Stats?.TotalReactions ?? 0,
            reposts = p.Stats?.Reposts ?? 0,
            date = p.PostedAt?.Date
        }).Take(10)));

        new Chart(engagementCtx, {
            type: 'bar',
            data: {
                labels: posts.map(p => p.date || 'N/A'),
                datasets: [
                    {
                        label: 'Reactions',
                        data: posts.map(p => p.reactions),
                        backgroundColor: '#0077B5'
                    },
                    {
                        label: 'Reposts',
                        data: posts.map(p => p.reposts),
                        backgroundColor: '#00A0DC'
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                },
                plugins: {
                    legend: { position: 'top' }
                }
            }
        });
    </script>
    }
